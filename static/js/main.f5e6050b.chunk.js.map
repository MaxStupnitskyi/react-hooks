{"version":3,"sources":["components/item.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Item","props","_useState","useState","_useState2","Object","slicedToArray","isShow","setIsShow","react_default","a","createElement","className","onClick","currentState","title","date","href","link","lecturer","App","lectures","setLectures","error","setError","_useState3","_useState4","isLoading","setIsLoading","useEffect","Axios","get","then","response","data","catch","Fragment","message","map","lecture","item","ReactDOM","render","App_App","document","getElementById","Boolean","window","location","hostname","match","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wPA2BeA,MAzBf,SAAcC,GAAO,IAAAC,EACWC,oBAAS,GADpBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACVK,EADUH,EAAA,GACFI,EADEJ,EAAA,GAKjB,OACIK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcC,QAJtB,kBAAML,EAAU,SAAAM,GAAY,OAAKA,MAKnCb,EAAMc,MACLR,EAAiDE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,KAAxCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,MAGXL,GACAE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,SAAmCX,EAAMe,MACzCP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAf,aACcH,EAAAC,EAAAC,cAAA,KAAGM,KAAMhB,EAAMiB,KAAMN,UAAU,eAAeX,EAAMkB,cCZtF,SAASC,IAAM,IAAAlB,EACoCC,mBAAS,IAD7CC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNmB,EADMjB,EAAA,GACIkB,EADJlB,EAAA,GACiBmB,EADjBnB,EAAA,GACwBoB,EADxBpB,EAAA,GAAAqB,EAEqBtB,oBAAS,GAF9BuB,EAAArB,OAAAC,EAAA,EAAAD,CAAAoB,EAAA,GAENE,EAFMD,EAAA,GAEKE,EAFLF,EAAA,GAkBb,OAJAG,oBAAU,WATRC,IACGC,IAAI,8GACJC,KAAK,SAAAC,GAAQ,OACZX,EAAYW,EAASC,KAAKb,WAC1BO,GAAa,IAEdO,MAAM,SAAAZ,GAAK,OAAIC,EAASD,IAAQK,GAAa,MAQhDnB,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0B,SAAA,KACE3B,EAAAC,EAAAC,cAAA,oFACAF,EAAAC,EAAAC,cAAA,WACGY,EAAQd,EAAAC,EAAAC,cAAA,SAAIY,EAAMc,SAAe,KAChCV,EAQElB,EAAAC,EAAAC,cAAA,wBAPFU,EAASiB,IAAI,SAAAC,GAAW,IACdxB,EAAgCwB,EAAhCxB,MAAOC,EAAyBuB,EAAzBvB,KAAMG,EAAmBoB,EAAnBpB,SAAUD,EAASqB,EAATrB,KAC/B,OACET,EAAAC,EAAAC,cAAC6B,EAAD,CAAMzB,MAAOA,EAAOC,KAAMA,EAAMG,SAAUA,EAAUD,KAAMA,QAWxEuB,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe,SAElCzB,QClCK0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNT,IAASC,OAAOjC,EAAAC,EAAAC,cAACwC,EAAD,MAASP,SAASC,eAAe,SD2H3C,kBAAmBO,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.f5e6050b.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nfunction Item(props) {\n    const [isShow, setIsShow] = useState(false);\n\n    const toggle = () => setIsShow(currentState => !currentState);\n\n    return (\n        <div className=\"item\">\n            <div className=\"item__title\" onClick={toggle}>\n                {props.title}\n                {!isShow ? <div className=\"item__toggle\">+</div> : <div className=\"item__toggle\">-</div>}\n            </div>\n            {\n                isShow &&\n                <div className=\"item__content\">\n                    <div className=\"item__date\">Date: {props.date}</div>\n                    <div className=\"item__lecturer\">\n                        Lecturer: <a href={props.link} className=\"github-link\">{props.lecturer}</a>\n                    </div>\n                </div>\n            }\n\n        </div>\n    )\n}\n\nexport default Item;","import React, {useState, useEffect} from 'react';\nimport ReactDOM from 'react-dom';\nimport Axios from 'axios';\nimport './App.css';\nimport Item from './components/item.jsx';\n\nfunction App() {\n  const [lectures, setLectures, error, setError] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  function fetchLectures() {\n    Axios\n      .get('https://raw.githubusercontent.com/kottans/chernivtsi-frontend-2019/master/homeworks/react-basics/data.json')\n      .then(response =>\n        setLectures(response.data.lectures),\n        setIsLoading(false)\n      )\n      .catch(error => setError(error), setIsLoading(false));\n  }\n\n  useEffect(() => {\n    fetchLectures();\n  });\n\n  return (\n    <>\n      <h1> ðŸ˜º Kottans Chernivtsi Front-end course scedule ðŸ˜º</h1>\n      <div>\n        {error ? <p>{error.message}</p> : null}\n        {!isLoading ? (\n          lectures.map(lecture => {\n            const { title, date, lecturer, link } = lecture;\n            return (\n              <Item title={title} date={date} lecturer={lecturer} link={link}></Item>\n            );\n          })\n        ) : (\n            <h3>Loading...</h3>\n          )}\n      </div>\n    </>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}